# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_communitymodeling(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def predict_trophic_interactions(self, params, context=None):
        """
        :param params: instance of type "trophicInteractionInput" ->
           structure: parameter "workspace" of String, parameter "model_ref"
           of String
        :returns: instance of type "trophicInteractionOutput" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method('kb_communitymodeling.predict_trophic_interactions',
                                        [params], self._service_ver, context)

    def meta_genome_model_construction(self, params, context=None):
        """
        :param params: instance of type "metaGenomeModelingInput" ->
           structure: parameter "workspace" of String, parameter "genome_ref"
           of String
        :returns: instance of type "metaGenomeModelingOutput" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method('kb_communitymodeling.meta_genome_model_construction',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_communitymodeling.status',
                                        [], self._service_ver, context)
